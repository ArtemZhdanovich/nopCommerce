@** Copyright 2015 Seven Spikes Ltd. All rights reserved. (http://www.nop-templates.com)
    * http://www.nop-templates.com/t/licensinginfo
*@

@using Nop.Core
@using Nop.Core.Infrastructure
@using SevenSpikes.Nop.Plugins.StoreLocator
@using SevenSpikes.Nop.Plugins.StoreLocator.Models
@using SevenSpikes.Nop.Plugins.StoreLocator.Domain.Enums

@model StoreLocatorModel

@{
        Layout = "~/Views/Shared/_ColumnsOne.cshtml";

        //title, meta
        Html.AddTitleParts(T("SevenSpikes.StoreLocator.Public.AllShops.PageTitle").Text);
        Html.AddMetaDescriptionParts(T("SevenSpikes.StoreLocator.Public.AllShops.PageMetaDescription").Text);
        Html.AddMetaKeywordParts(T("SevenSpikes.StoreLocator.Public.AllShops.PageMetaKeywords").Text);

        var supportRtl = this.ShouldUseRtlTheme();

        Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.StoreLocator/Themes/" + Model.Theme + "/Content/StoreLocator.css");
        if (supportRtl)
        {
            Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.StoreLocator/Themes/" + Model.Theme + "/Content/StoreLocator.rtl.css");
        }

        Html.AddScriptParts("~/Plugins/SevenSpikes.Core/Scripts/SevenSpikesExtensions.min.js");
        Html.AddScriptParts("~/Plugins/SevenSpikes.Nop.Plugins.StoreLocator/Scripts/StoreLocatorAllShops.min.js");

        string units = (Model.Settings.UnitsSystem == UnitsSystems.Metric ? T("SevenSpikes.StoreLocator.Public.Units.Kilometers") : T("SevenSpikes.StoreLocator.Public.Units.Miles")).ToString();

        var storeLocation = EngineContext.Current.Resolve<IWebHelper>().GetStoreLocation();

        // Performance optimization for the loading of the page. There is a setting how many shops to load on page load (NumberOfStoresOnInitialLoad)
        // and we get the remaining stores with Ajax when the page is loaded.
        var shouldGetRemainingShops = Model.Shops.Count == Model.Settings.NumberOfStoresOnInitialLoad;
}
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>

<div class="page all-shops-page">
    <div class="page-title">
        <h1>@T("SevenSpikes.StoreLocator.Public.Title")</h1>
    </div>
    <div class="page-body">
        @if (Model.Shops.Count > 0)
        {
            <div class="map-controls current-location-wrap">
                <a class="getUserGeoLocation">@T("SevenSpikes.StoreLocator.Public.UseMyLocation")</a>
                <span class="additional-info"></span>
            </div>
            <div class="map-wrapper">
                <div class="map" id="all-shops-map-holder"></div>
                <input id="shop-address-input" type="text" style="display: none" placeholder="@T("SevenSpikes.StoreLocator.Public.SearchMyLocation")" />
            </div>
            <div class="directions-wrapper">
                <div class="directions-panel" id="directions-panel">
                    <a id="backToResults">@T("SevenSpikes.StoreLocator.Public.BackToResults")</a>
                </div>
            </div>
            <input type="hidden" class="shop-resources"
                   data-markersdata="@Model.ShopMarkersJson"
                   data-shouldgetremainingshops="@shouldGetRemainingShops.ToString().ToLowerInvariant()"
                   data-getremainingshopsurl="@(Url.Action("GetRemainingShops", "StoreLocator"))"
                   data-youarehere="@T("SevenSpikes.StoreLocator.Public.YouAreHere")"
                   data-accuracy="@T("SevenSpikes.StoreLocator.Public.Accuracy")"
                   data-geolocationnotsupported="@T("SevenSpikes.StoreLocator.Public.GeoLocationNotSupported")"
                   data-pathtoimages="@storeLocation@Constants.PathToImagesFolder"
                   data-units="@Model.Settings.UnitsSystem.ToString()"
                   data-googleapikey="@Model.Settings.GoogleApiKey"
                   data-manuallysetmapbounds="@Model.Settings.ManuallySetMapBounds.ToString().ToLowerInvariant()"
                   data-latitude="@Model.Settings.Latitude"
                   data-longitude="@Model.Settings.Longitude"
                   data-mapzoomlevel="@Model.Settings.MapZoomLevel"
                   data-mapstyles="@Model.Settings.CustomMapStyles"
                   value="1" />
            if (Model.Shops.Count > 1)
            {
                <div class="shops-sorting-filtering-wrapper">
                    <div class="shops-sorting-options">
                        <label for="sortingSelect">@T("SevenSpikes.StoreLocator.Public.Sortby")</label>
                        <select id="sortingSelect">
                            <option value="sortbydistance" disabled="disabled">@T("SevenSpikes.StoreLocator.Public.SortMethod.Distance")</option>
                            <option value="sortbyname">@T("SevenSpikes.StoreLocator.Public.SortMethod.Name")</option>
                            <option value="sortbyid" selected="selected">@T("SevenSpikes.StoreLocator.Public.SortMethod.DefaultOrder")</option>
                        </select>
                    </div>
                    <div class="radiusFilterWrapper" id="searchRadiusWrapper">
                        <label>@T("SevenSpikes.StoreLocator.Public.SortMethod.SearchForShopInRadius")</label>
                        <input type="number" value="@Model.Settings.DefaultDistanceRadius" id="searchRadius" />
                        <span class="units">@units</span>
                    </div>
                    <div class="searchbytags-wrapper">
                        <label for="searchByTagsInput">@T("SevenSpikes.StoreLocator.Public.SearchByTag")</label>
                        <input type="text" value="" id="searchByTagsInput" />
                    </div>
                    <div class="shops-filtering-buttons">
                        <a class="clear-filtered-shops" id="clearShopFilters">@T("SevenSpikes.StoreLocator.Public.ClearFilters")</a>
                        <div class="button-wrap">
                            <button class="filter-shops-button" id="searchForFilteredShops">@T("SevenSpikes.StoreLocator.Public.SortMethod.Search")</button>
                        </div>
                    </div>
                </div>
            }
            <ul class="shops-list">
                @Html.Partial("_AllShopsShopsList", Model)
            </ul>
            <div class="no-results no-shops-after-filtering">@T("SevenSpikes.StoreLocator.Public.NoShopsAfterFiltering")</div>
        }
        else
        {
            <div class="no-results">@T("SevenSpikes.StoreLocator.Public.NoShops")</div>
        }
    </div>
</div>