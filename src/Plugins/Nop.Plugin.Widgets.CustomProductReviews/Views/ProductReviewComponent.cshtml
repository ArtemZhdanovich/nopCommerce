@using Microsoft.AspNetCore.Mvc
@using Nop.Core.Infrastructure
@model Nop.Web.Models.Catalog.ProductReviewsModel




@{
    NopHtml.AppendPageCssClassParts("html-product-reviews-page");
    NopHtml.AddCssFileParts("~/Plugins/Widgets.CustomProductReviews/Content/style.css");
    //Layout = "_ColumnsOne";
}
<link href="~/Plugins/Widgets.CustomProductReviews/Content/style.css" rel="stylesheet" />


@{
    var _storeContext = EngineContext.Current.Resolve<Nop.Core.IStoreContext>();
    var _settingService = EngineContext.Current.Resolve<Nop.Services.Configuration.ISettingService>();

    var setting = await _settingService.LoadSettingAsync<Nop.Plugin.Widgets.CustomProductReviews.CustomProductReviewsSettings>((await _storeContext.GetCurrentStoreAsync()).Id);
    if (setting == null)
    {
        setting = await _settingService.LoadSettingAsync<Nop.Plugin.Widgets.CustomProductReviews.CustomProductReviewsSettings>();
    }
}
<div class="page product-reviews-page">
<div >
        <h2 style="text-align: center;">@T("Reviews.ProductReviewsFor") <a href="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })">@Model.ProductName</a></h2>

    </div>
    <div class="page-body">
        @if (Model.AddProductReview.SuccessfullyAdded)
        {
            <div class="submitReviewResult result">
                @Model.AddProductReview.Result
            </div>
        }
        else if (!Model.AddProductReview.CanAddNewReview)
        {
            <div class="result review-already-added">
                @T("Reviews.AlreadyAddedProductReviews")
            </div>
        }
        else
        {
            <div class="write-review">
                <div class="title">
                    <strong>@T("Reviews.Write")</strong>
                </div>
                <form id="review-form" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="productId" value="@(Model.ProductId)" />

                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    <div id="message-success-review-form" class="form-message message-success"></div>
                    <div id="message-error-review-form" class="form-message message-error"></div>
                    <div class="fieldset">
                        <div class="form-fields">
                            <div class="inputs">
                                <label asp-for="AddProductReview.Title" asp-postfix=":"></label>
                                <input asp-for="AddProductReview.Title" class="review-title" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)"/>
                                <nop-required/>
                                <span asp-validation-for="AddProductReview.Title"></span>
                            </div>
                            <div class="inputs">
                                <label asp-for="AddProductReview.ReviewText" asp-postfix=":"></label>
                                <textarea asp-for="AddProductReview.ReviewText" class="review-text" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)"></textarea>
                                <nop-required/>
                                <span asp-validation-for="AddProductReview.ReviewText"></span>
                            </div>
                            <div class="inputs">
                                <label>Attach files</label>
                                <input type="file" id="photos" name="photos" multiple="multiple" onchange="readURLFileUpload()"/>
                                Max file in upload: 5
                            </div>
                            <div class="review-rating">
                                <label asp-for="AddProductReview.Rating" asp-postfix=":"></label>
                                <ul>
                                    <li class="label first">@T("Reviews.Fields.Rating.Bad")</li>
                                    <li class="rating-options">
                                        <input asp-for="AddProductReview.Rating" value="0" type="radio" id="addproductrating_0" style="display: none;"/>
                                        <input asp-for="AddProductReview.Rating" value="1" type="radio" id="addproductrating_1" aria-label="@T("Reviews.Fields.Rating.Bad")"/>
                                        <label for="addproductrating_1">1</label>
                                        <input asp-for="AddProductReview.Rating" value="2" type="radio" id="addproductrating_2" aria-label="@T("Reviews.Fields.Rating.NotGood")"/>
                                        <label for="addproductrating_2">2</label>
                                        <input asp-for="AddProductReview.Rating" value="3" type="radio" id="addproductrating_3" aria-label="@T("Reviews.Fields.Rating.NotBadNotExcellent")"/>
                                        <label for="addproductrating_3">3</label>
                                        <input asp-for="AddProductReview.Rating" value="4" type="radio" id="addproductrating_4" aria-label="@T("Reviews.Fields.Rating.Good")"/>
                                        <label for="addproductrating_4">4</label>
                                        <input asp-for="AddProductReview.Rating" value="5" type="radio" id="addproductrating_5" aria-label="@T("Reviews.Fields.Rating.Excellent")"/>
                                        <label for="addproductrating_5">5</label>
                                    </li>
                                    <li class="label last">@T("Reviews.Fields.Rating.Excellent")</li>
                                </ul>
                            </div>
                            @if (Model.ReviewTypeList.Count > 0)
                            {
                                foreach (var additionalReview in Model.AddAdditionalProductReviewList.OrderBy(ob => ob.DisplayOrder).ToList())
                                {
                                    var curAdditionalReview = Model.AddAdditionalProductReviewList.IndexOf(additionalReview);
                                    <div class="review-rating">
                                        <label>@Html.Raw(additionalReview.Name):</label>
                                        @*<span class="tooltip-text">@Html.Raw(additionalReview.Description)</span>*@
                                        <ul>
                                            <li class="label first">@T("Reviews.Fields.Rating.Bad")</li>
                                            <li class="rating-options">
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].ReviewTypeId" value="@(additionalReview.ReviewTypeId)" type="hidden"/>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Name" value="@(additionalReview.Name)" type="hidden"/>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Description" value="@(additionalReview.Description)" type="hidden"/>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].DisplayOrder" value="@(additionalReview.DisplayOrder)" type="hidden"/>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].IsRequired" value="@(additionalReview.IsRequired)" type="hidden"/>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="0" type="radio" id="addproductratingext_0_@(additionalReview.ReviewTypeId)" style="display: none"/>
                                                <label for="addproductratingext_0_@(additionalReview.ReviewTypeId)" style="display: none">0</label>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="1" type="radio" id="addproductratingext_1_@(additionalReview.ReviewTypeId)"/>
                                                <label for="addproductratingext_1_@(additionalReview.ReviewTypeId)">1</label>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="2" type="radio" id="addproductratingext_2_@(additionalReview.ReviewTypeId)"/>
                                                <label for="addproductratingext_2_@(additionalReview.ReviewTypeId)">2</label>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="3" type="radio" id="addproductratingext_3_@(additionalReview.ReviewTypeId)"/>
                                                <label for="addproductratingext_3_@(additionalReview.ReviewTypeId)">3</label>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="4" type="radio" id="addproductratingext_4_@(additionalReview.ReviewTypeId)"/>
                                                <label for="addproductratingext_4_@(additionalReview.ReviewTypeId)">4</label>
                                                <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="5" type="radio" id="addproductratingext_5_@(additionalReview.ReviewTypeId)"/>
                                                <label for="addproductratingext_5_@(additionalReview.ReviewTypeId)">5</label>
                                            </li>
                                            <li class="label last">@T("Reviews.Fields.Rating.Excellent")</li>
                                        </ul>
                                    </div>
                                }
                            }
                            @if (Model.AddProductReview.DisplayCaptcha)
                            {
                                <nop-captcha/>
                            }
                        </div>
                    </div>
                    <div class="buttons">
                        <input type="submit" id="add-review" name="add-review" @(!Model.AddProductReview.CanCurrentCustomerLeaveReview == true ? "disabled" : "") class="button-1 write-product-review-button" value="@T("Reviews.SubmitButton")"/>
                    </div>
                </form>
            </div>
        }
        @if (Model.Items.Count > 0)
        {
            <div class="product-review-list">
                <div class="title">
                    <strong>@T("Reviews.ExistingReviews")</strong>
                </div>
                @foreach (var review in Model.Items)
                {
                    var ratingPercent = review.Rating * 20;
                    <div class="product-review-item">
                        <div class="review-item-head">

                            <div class="review-info">
                                <span class="user">
                                    <label>@T("Reviews.From"):</label>
                                    @if (review.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                                    }
                                    else
                                    {
                                        <span>@review.CustomerName</span>
                                    }
                                </span>
                                @if (!string.IsNullOrEmpty(review.CustomerAvatarUrl))
                                {
                                    <div class="avatar">
                                        @if (review.AllowViewingProfiles)
                                        {
                                            <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })" class="avatar-img-link">
                                                <img src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar" />
                                            </a>
                                        }
                                        else
                                        {
                                            <img src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar" />
                                        }
                                    </div>
                                }
                                <span class="date">
                                    <label>@T("Reviews.Date"):</label>
                                    <span>@review.WrittenOnStr</span>
                                </span>
                            </div>
                            <div class="product-review-box">
                                <div class="rating">
                                    <div style="width: @(ratingPercent)%">
                                    </div>
                                </div>
                            </div>
                            @foreach (var reviewType in review.AdditionalProductReviewList.Where(x => x.Rating > 0 && x.VisibleToAllCustomers))
                            {
                                var ratingExtPercent = reviewType.Rating * 20;
                                <div class="review-type-rating-ext">
                                    <div class="review-title">
                                        <span>@reviewType.Name</span>
                                    </div>
                                    <div class="product-review-box">
                                        <div class="rating">
                                            <div style="width: @(ratingExtPercent)%">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="review-content">
                            <div class="review-title">
                                <strong>@review.Title</strong>
                            </div>
                            <div class="review-text">
                                @Html.Raw(htmlFormatter.FormatText(review.ReviewText, false, true, false, false, false, false))
                            </div>
                            <div class="mediacontainer">
                                @await Component.InvokeAsync("ProductReviewVideos",new { widgetZone = PublicWidgetZones.ProductReviewsPageInsideReview, additionalData = review  })
                                @await Component.InvokeAsync("ProductReviewPictures",new { widgetZone = PublicWidgetZones.ProductReviewsPageInsideReview, additionalData = review  })
                            </div>
                            @await Html.PartialAsync("~/Plugins/Widgets.CustomProductReviews/Views/_ProductReviewHelpfulness.cshtml", review.Helpfulness)
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductReviewsPageInsideReview, additionalData = review })
                            @if (!string.IsNullOrEmpty(review.ReplyText))
                            {
                                <div class="reply">
                                    <div class="reply-header">
                                        @T("Reviews.Reply")
                                    </div>
                                    <div class="reply-text">
                                        @Html.Raw(htmlFormatter.FormatText(review.ReplyText, false, true, false, false, false, false))
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductReviewsPageBottom, additionalData = Model })


    </div>
</div>
<script asp-location="Footer">
    var uploadButton = document.getElementById('add-review');

    $('#review-form').submit(function (e) {
        var form = $(this);
        e.preventDefault();
        uploadButton.value = 'Submitting...';
        e.stopImmediatePropagation();
        //if (!form.valid()) return false;
        if (!readURLFileUpload()) return false;
        var formData = new FormData(form[0]);
        formData.append("productId", @Model.ProductId);
        var t = $("input[name='__RequestVerificationToken']").val();
        $(".form-message").html("");
        $.ajax({
            url: '@Url.Action("ProductReviewsAdd", "CustomProductReviews")',
            type: 'POST',
            headers:
            {
                "RequestVerificationToken": t
            },
            data: formData,
            contentType: false,
            processData: false,
            beforeSend: function(){
                $('#review-form .ajax-loader').css("visibility", "visible");
            },
            success: function (data) {
                console.log('success1');
                console.log(data.AddProductReview);
                var strmsg = "";
                uploadButton.value = "@T("Reviews.SubmitButton")";
                console.log(data.AddProductReview.Result);
                if (data.AddProductReview.Result.length > 0) {
                    strmsg += "<ul>";
                    strmsg += "<li>" + data.AddProductReview.Result + "</li>";
                    strmsg += "</ul>";
                    console.log(strmsg);
                    if (!data.AddProductReview.SuccessfullyAdded) {
                        console.log('hatadatamesajı');
                        $("#message-error-review-form").html(strmsg);
                    }
                    else {
                        console.log('basaridatamesajı');
                        $("#message-success-review-form").html(strmsg);
                        $("#review-form .review-form-body").css("display", "none");
                        document.getElementById("review-form").reset();
                    }
                    if (typeof grecaptcha != "undefined") {
                        grecaptcha.reset();
                    }
                    $('html, body').animate({ scrollTop: $("#message-success-review-form").offset().top }, 'slow');

                    return false;
                }
                //console.log(data);
            },
            error: function (xhr, resp, text) {
                console.log(xhr, resp, text);
            },
            complete: function () {
                console.log('complatereview');
                //location.reload(true);

                $('#review-form .ajax-loader').css("visibility", "hidden");
                uploadButton.value = "@T("Reviews.SubmitButton")";

            }
        });
        return false;
    });

    $(document).ready(function () {
        $('.product-review-links a,.product-no-reviews a').on('click', function (e) {
            e.preventDefault();
            $('html, body').animate({
                scrollTop: $("#review-form").offset().top
            }, 500);
        });
    });

    function readURLFileUpload() {
        var fileSelect = document.getElementById('photos'),
            supportedFileFormat = '.jpg,.jpeg,.png,.mp4,.mov,.webp,.webm',
            files = fileSelect.files;
        console.log('dosyalar adeti');
console.log(files.length);
 console.log('settings adeti');
console.log(@setting.MaximumFile);
        if (files.length > @setting.MaximumFile) {
                alert('File upload exceeds the allowed size Your file sizes:' + myfile.size+'bytes / Maximum file size:'+@setting.MaximumSize+'bytes' );
            //alert('@T("Nop.Plugin.Widgets.CustomProductReviews.MaximumUploadedFile")');
            $("#photos").val("");
            return false;
        }

        for (var i = 0; i < files.length; i++) {
            var myfile = files[i],
                value = myfile.type.toLocaleLowerCase(),
                type = value.substr(value.lastIndexOf(".")).toString();

            if (supportedFileFormat.indexOf(type) == -1) {
                //alert('@T("Nop.Plugin.Widgets.CustomProductReviews.AllowedExtension")');
                alert('File is not properly formatted');

                $("#photos").val("");
                return false;
            }
                  console.log('dosyalar boyutu');
            console.log(myfile.size);
 console.log('settings boyutu');
            console.log(@setting.MaximumSize);
            if (myfile.size > @setting.MaximumSize) {
                alert('File upload exceeds the allowed size Your file sizes:' + myfile.size+'bytes / Maximum file size:'+@setting.MaximumSize+'bytes' );
                //alert('@T("Nop.Plugin.Widgets.CustomProductReviews.MaximumUploadedFileSize")');
                $("#photos").val("");
                return false;
            }
        }
        return true;
    }
</script>



