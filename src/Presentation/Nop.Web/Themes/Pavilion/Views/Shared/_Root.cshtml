@using Nop.Core
@using Nop.Services.Configuration
@* ABC: for shopping cart item count *@
@using Nop.Services.Orders
@using Nop.Core.Domain.Orders

@inject IStoreContext storeContext
@inject ISettingService settingService
@* ABC: custom inject *@
@inject IWorkContext workContext
@inject IShoppingCartService shoppingCartService

@{
    Layout = "_Root.Head";

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase) && actionName.Equals("index", StringComparison.InvariantCultureIgnoreCase);

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    bool isLogoStickyOnMobileDevice = await settingService.GetSettingByKeyAsync("pavilionthemesettings.islogostickyonmobiledevice", false, storeId, true);
    string stickyLogoClass = isLogoStickyOnMobileDevice ? "mobile-sticky-logo" : string.Empty;

    // ABC: modifications
    var mobilePhoneNumber = await settingService.GetSettingByKeyAsync("coresettings.mobilephonenumber", "800-981-3866");
    var customer = await workContext.GetCurrentCustomerAsync();
    var shoppingCartItemCount = (await shoppingCartService.GetShoppingCartAsync(
        customer,
        ShoppingCartType.ShoppingCart
    )).Count();
}

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")

<div class="master-wrapper-page @stickyLogoClass">
    @* ABC: customizing mobile nav. - header moved below *@
    <div class="responsive-nav-wrapper-parent">
        <div class="responsive-nav-wrapper">
            <div id="mobile-header-logo">
                @await Component.InvokeAsync("Logo")
            </div>
            <div class="phone"><a href="/contact-us">@mobilePhoneNumber</a></div>
            <div class="personal-button" id="header-links-opener">
                <span>@T("SevenSpikes.Themes.Common.Personal")</span>
            </div>
            <div class="shopping-cart-link">
                <a href="/cart">
                    <span>@T("ShoppingCart")</span>
                    @if (@shoppingCartItemCount > 0)
                    {
                        <div class="mobile-cart-qty">@shoppingCartItemCount</div>
                    }
                </a>
            </div>
        </div>
    </div>
    @* ABC: search bar for mobile *@
    <div class="mobile-header-content-row">
        <div class="mobile-menu" onClick="toggleMobileMenu()">
            <span>Menu</span>
        </div>
        @await Component.InvokeAsync("SearchBox")
    </div>

    @* ABC: moved header to below *@
    @await Html.PartialAsync("_Header")
    <script asp-location="Footer">
        var localized_data = {
            AjaxCartFailure: "@T("AjaxCart.Failure")"
        };
        AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart', localized_data);
    </script>
    <div class="overlayOffCanvas"></div>
    
    <div class="master-wrapper-content">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })
		@await Component.InvokeAsync("Widget", new { widgetZone = "pavilion_color_squares" })

        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @if (isHomePage)
    {
		@await Component.InvokeAsync("Widget", new { widgetZone = "homepage_content_after" })
    }

    @await Component.InvokeAsync("Footer")
</div>

@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
