@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@using Microsoft.AspNetCore.Html;
@inject Nop.Core.IWebHelper webHelper 
@inject SeoSettings seoSettings

@using Nop.Core
@using Nop.Services.Configuration
@inject ISettingService settingService
@inject IStoreContext storeContext

@{
    Layout = "_ColumnsOne";

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }

    var productPageLayout = await settingService.GetSettingByKeyAsync("VoyageThemeSettings.ProductPageLayout", "standard-gallery", storeId, true);
    var isExtendedGallery = productPageLayout.Equals("extended-gallery");
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div class="product-data" data-productid="@Model.Id">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
                <div class="product-essential">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <div class="page-title product-name mobile">
                        @await Html.PartialAsync("_Discontinued", Model)
                        <h1>@Model.Name</h1>
                    </div>
                    @{
                        IHtmlContent cloudZoom = null;
                        if (((await settingService.GetSettingByKeyAsync("VoyageThemeSettings.ProductPageLayout", "standard-gallery", storeId, true)).Equals("standard-gallery")))
                        {
                            cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom", additionalData = Model });
                        }
                    }
                    @if (cloudZoom != null && !String.IsNullOrEmpty(await cloudZoom.RenderHtmlContentAsync()))
                    {
                        @cloudZoom
                    }
                    else
                    {
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                    }
                    <div class="overview">
                        <div class="page-title product-name desktop">
                            @await Html.PartialAsync("_Discontinued", Model)
                            <h1>@Model.Name</h1>
                        </div>
                        <div class="price-reviews-wrapper">
                            @{ <!--prices-->
                                var dataDictPrice = new ViewDataDictionary(ViewData);
                                dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                            }
                            <!--product reviews-->
                            @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }
                        <div class="stock-delivery-wrapper">
                            @await Html.PartialAsync("_Availability", Model)
                            @await Html.PartialAsync("_DeliveryInfo", Model)
                        </div>
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <!--SKU, MAN, GTIN, vendor-->
                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                        }
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--estimate shipping-->
                        @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                        <div class="cart-buttons-wrapper">
                            <!--add to cart-->
                            @{
                                var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                            }
                            <!--wishlist, compare, email a friend-->
                            <div class="overview-buttons">
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                @{
                                    var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                    dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                }
                                @await Html.PartialAsync("_CompareProductsButton", Model)
                                @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                            </div>
                        </div>
                        @await Html.PartialAsync("_ShareButton", Model)
                        @if (isExtendedGallery)
                        {
                            @await Component.InvokeAsync("Widget", new { widgetZone = "seven_spikes_product_tabs" })
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>
                @if (!isExtendedGallery)
                {
                    @await Component.InvokeAsync("Widget", new { widgetZone = "seven_spikes_product_tabs" })
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                <div class="product-collateral">
                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                </div>
                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
            </div>
        </form>
    </div>
</div>
