using Metalama.Framework.Aspects;
using Metalama.Framework.Fabrics;

namespace Metalama.Aspects
{
    internal class Fabric : TransitiveProjectFabric
    {
        public override void AmendProject(IProjectAmender amender)
        {
            // Error CS8648 in code generated by Metalama: A goto cannot jump to a location after a using declaration.
            amender.With(p => p.Types.SelectMany(t => t.Methods).Where( m => !m.IsAbstract && !m.IsAsync && !m.IsImplicitlyDeclared)).AddAspect<FabricAspect>();

            // Error LAMA0039: The project fabric 'Metalama.Aspects.Fabric' cannot add a child aspect of type 'FabricAspect' to X because X must be a non-abstract method.
            //amender.With(p => p.Types.SelectMany(t => t.Methods).Where(m => m.IsAbstract )).AddAspect<FabricAspect>();

            // Error LAMA0041: 'FabricAspect.OverrideMethod()' threw 'AssertionFailedException' when applied to X
            //amender.With(p => p.Types.SelectMany(t => t.Methods).Where(m => m.IsAsync)).AddAspect<FabricAspect>();

            // Error LAMA0039: The project fabric 'Metalama.Aspects.Fabric' cannot add a child aspect of type 'Log' to X because X must be explicitly declared.
            //amender.With(p => p.Types.SelectMany(t => t.Methods).Where(m => m.IsImplicitlyDeclared)).AddAspect<FabricAspect>();
        }
    }

    public class FabricAspect : OverrideMethodAspect
    {
        public override dynamic? OverrideMethod()
        {
            return meta.Proceed();
        }
    }
}
